import sqlite3

# -----------------------------------------------------------------------------
# Script: count_email_domains.py
# Purpose:
#   - Read a mailbox file (default 'mbox.txt'), extract sender domains,
#     count how many messages come from each domain, and store those counts
#     in a SQLite database for easy querying and persistence.
#
# Workflow:
#   1. Connect to (or create) the SQLite database 'orgdb.sqlite'.
#   2. Recreate the Counts table (domain, count) from scratch.
#   3. Prompt the user for a filename (default 'mbox.txt').
#   4. Parse each line starting with 'From: ', extract the domain part
#      of the email address, and update its count in the database.
#   5. Commit all changes once parsing is done.
#   6. Query and print the top 10 domains by message count.
#
# Benefits of this approach:
#   - Persistence: Counts are stored on disk and survive script restarts.
#   - Flexibility: You can change the final SELECT to get different reports.
#   - Performance: By committing once after the loop, we minimize disk I/O.
# -----------------------------------------------------------------------------

# 1. Open (or create) the SQLite database and obtain a cursor
conn = sqlite3.connect('orgdb.sqlite')   # creates the file if it doesn't exist
cur = conn.cursor()

# 2. Reset the Counts table for a fresh run
cur.execute('DROP TABLE IF EXISTS Counts')  
cur.execute('''
    CREATE TABLE Counts (
        org   TEXT,      -- email domain, e.g. "gmail.com"
        count INTEGER    -- number of messages from that domain
    )
''')

# 3. Prompt for the mailbox filename
fname = input('Enter file name: ')
if len(fname) < 1:
    fname = 'mbox.txt'
fh = open(fname)

# 4. Iterate over each line and update counts
for line in fh:
    # Skip lines that don't begin with "From: "
    if not line.startswith('From: '):
        continue

    # Split the line into words; the second word is email address
    parts = line.split()
    email = parts[1]                # e.g. "user@example.com"
    domain = email.split('@')[1]    # everything after '@'

    # Look up the current count for this domain
    cur.execute('SELECT count FROM Counts WHERE org = ?', (domain,))
    row = cur.fetchone()

    if row is None:
        # Domain not seen before → insert with count = 1
        cur.execute(
            'INSERT INTO Counts (org, count) VALUES (?, 1)',
            (domain,)
        )
    else:
        # Domain exists → increment its count
        cur.execute(
            'UPDATE Counts SET count = count + 1 WHERE org = ?',
            (domain,)
        )

# 5. Commit all inserts/updates in one go for better performance
conn.commit()

# 6. Retrieve and display the top 10 domains by count
print('\nTop 10 email domains:')
for org, cnt in cur.execute('''
    SELECT org, count
      FROM Counts
  ORDER BY count DESC
     LIMIT 10
'''):
    print(f'{org:20} {cnt}')

# Clean up resources
cur.close()
conn.close()
