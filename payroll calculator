#!/usr/bin/env python3
"""
Payroll Calculator

This script computes an employee’s net pay for a pay period by:
  1. Calculating basic salary from hours worked and hourly rate
  2. Summing up mandatory deductions (Provident Fund and tax)
  3. Subtracting total deductions from basic salary to yield the net salary

Usage Modes:
  • Interactive prompts (run without CLI args)
  • CLI via argparse (pass hours, rate, PF, and tax as arguments)
"""

import sys
import argparse


def calculate_payroll(
    hours_worked: float,
    hourly_rate: float,
    pf: float,
    tax: float
) -> float:
    """
    Compute net salary after PF and tax deductions.

    Parameters:
      hours_worked (float): Total hours worked in the pay period.
      hourly_rate (float): Compensation per hour worked.
      pf           (float): Provident Fund (e.g., 401k) deduction amount.
      tax          (float): Tax deduction amount.

    Returns:
      float: Net pay after subtracting PF and tax from basic salary.
    """
    # 1. Calculate the gross pay (basic salary)
    basic_salary = hours_worked * hourly_rate

    # 2. Sum all fixed deductions
    total_deductions = pf + tax

    # 3. Subtract deductions from gross to get net pay
    total_salary = basic_salary - total_deductions

    return total_salary


# -----------------------------------------------------------------------------
# Command-Line Interface (optional)
# -----------------------------------------------------------------------------
def parse_args():
    parser = argparse.ArgumentParser(
        description="Calculate net salary after PF and tax deductions."
    )
    parser.add_argument(
        "hours_worked",
        type=float,
        help="Total hours worked in the pay period (e.g., 40)"
    )
    parser.add_argument(
        "hourly_rate",
        type=float,
        help="Pay rate per hour (e.g., 25.50)"
    )
    parser.add_argument(
        "--pf", "-p",
        type=float,
        default=0.0,
        help="Provident Fund deduction amount (e.g., 100.00)"
    )
    parser.add_argument(
        "--tax", "-t",
        type=float,
        default=0.0,
        help="Tax deduction amount (e.g., 150.00)"
    )
    return parser.parse_args()


if __name__ == "__main__":
    # Determine mode: CLI arguments vs. interactive prompts
    if len(sys.argv) > 1:
        args = parse_args()
        hours = args.hours_worked
        rate  = args.hourly_rate
        pf_amt= args.pf
        tax_amt= args.tax
    else:
        # Interactive prompts for each input value
        hours   = float(input("Enter hours worked: "))
        rate    = float(input("Enter hourly rate: "))
        pf_amt  = float(input("Enter PF deduction (Provident Fund): "))
        tax_amt = float(input("Enter tax deduction amount: "))

    # Compute net salary using the helper function
    net_pay = calculate_payroll(hours, rate, pf_amt, tax_amt)

    # Output the result formatted as currency
    print(f"Total salary after deductions is: ${net_pay:,.2f}")
